#!/usr/bin/env bash

# carthage workaround
# Usage example: ./carthage build --platform iOS
#
# Source(s):
# - https://github.com/Carthage/Carthage/issues/3201
# - https://github.com/Carthage/Carthage/issues/3019#issuecomment-665136323
# - https://github.com/Carthage/Carthage/issues/3019#issuecomment-734415287
#

set -euo pipefail

# Determine architecture of current machine
ACTIVE_ARCH=$(uname -m)

if [[ $ACTIVE_ARCH == "x86_64" ]]; then

	# If running on Intel machine, do the excluded architectures dance üíÉüï∫

	xcconfig=$(mktemp /tmp/static.xcconfig.XXXXXX)
	trap 'rm -f "$xcconfig"' INT TERM HUP EXIT

	echo "‚ö†Ô∏è  NOTE: Using Carthage workaround script..."

	# For Xcode 12 and 13 make sure EXCLUDED_ARCHS is set to arm architectures otherwise
	# the build will fail on lipo due to duplicate architectures.

	CURRENT_XCODE_VERSION="$(xcodebuild -version | grep "Xcode" | cut -d' ' -f2 | cut -d'.' -f1)00"
	CURRENT_XCODE_BUILD=$(xcodebuild -version | grep "Build version" | cut -d' ' -f3)

	echo "EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64__XCODE_${CURRENT_XCODE_VERSION}__BUILD_${CURRENT_XCODE_BUILD} = arm64 arm64e armv7 armv7s armv6 armv8" >> $xcconfig

	echo 'EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64__XCODE_'${CURRENT_XCODE_VERSION}' = $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64__XCODE_$(XCODE_VERSION_MAJOR)__BUILD_$(XCODE_PRODUCT_BUILD_VERSION))' >> $xcconfig
	echo 'EXCLUDED_ARCHS = $(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT)__XCODE_$(XCODE_VERSION_MAJOR))' >> $xcconfig

	export XCODE_XCCONFIG_FILE="$xcconfig"
	carthage "$@"

else

	# Running on arm64 machine so just use the plain carthage
	echo "‚ö†Ô∏è  NOTE: Using plain vanilla Carthage..."
	carthage "$@"

fi

