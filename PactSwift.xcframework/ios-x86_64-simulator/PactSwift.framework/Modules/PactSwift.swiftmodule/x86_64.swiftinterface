// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PactSwift
import Foundation
@_exported import PactSwift
import Swift
import XCTest
public enum Pacticipant {
  case consumer(Swift.String)
  case provider(Swift.String)
}
extension Pacticipant : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Response {
}
extension Response : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension String : PactSwift.PactPathParameter {
}
extension Matcher {
  public struct RegexLike : PactSwift.PactPathParameter {
    public init(_ value: Swift.String, term: Swift.String)
  }
}
@objc(PFMatcherRegexLike) public class ObjcRegexLike : ObjectiveC.NSObject {
  @objc(value:term:) public init(value: Swift.String, term: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension Matcher {
  public struct IntegerLike {
    public init(_ value: Swift.Int)
  }
}
@objc(PFMatcherIntegerLike) public class ObjcIntegerLike : ObjectiveC.NSObject {
  @objc(value:) public init(value: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
public struct ExampleGenerator {
}
public struct ProviderState : Swift.Encodable {
  public init(description: Swift.String, params: [Swift.String : Swift.String])
  public func encode(to encoder: Swift.Encoder) throws
}
extension ProviderState : Swift.Equatable {
  public static func == (lhs: PactSwift.ProviderState, rhs: PactSwift.ProviderState) -> Swift.Bool
}
@objc(ProviderState) final public class ObjCProviderState : ObjectiveC.NSObject {
  @objc(initWithDescription:params:) public init(description: Swift.String, params: [Swift.String : Swift.String])
  @objc override dynamic public init()
  @objc deinit
}
public struct Request {
}
extension Request : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension Matcher {
  public struct EachLike {
    public init(_ value: Any, count: Swift.Int = 1)
    public init(_ value: Any, min: Swift.Int, count: Swift.Int = 1)
    public init(_ value: Any, max: Swift.Int, count: Swift.Int = 1)
    public init(_ value: Any, min: Swift.Int, max: Swift.Int, count: Swift.Int = 1)
  }
}
@objc(PFMatcherEachLike) public class ObjcEachLike : ObjectiveC.NSObject {
  @objc(value:count:) public init(value: Any, count: Swift.Int = 1)
  @objc(value:min:max:count:) public init(value: Any, min: Swift.Int, max: Swift.Int, count: Swift.Int = 1)
  @objc override dynamic public init()
  @objc deinit
}
extension ExampleGenerator {
  public struct RandomDateTime {
    public init(format: Swift.String? = nil)
  }
}
@objc(PFGeneratorRandomDateTime) public class ObjcRandomDateTime : ObjectiveC.NSObject {
  @objc(format:) public init(format: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
public struct Matcher {
}
extension ExampleGenerator {
  public struct RandomInt {
    public init(min: Swift.Int = 0, max: Swift.Int = 2_147_483_647)
  }
}
@objc(PFGeneratorRandomInt) public class ObjcRandomInt : ObjectiveC.NSObject {
  @objc(min:max:) public init(min: Swift.Int = 0, max: Swift.Int = 2_147_483_647)
  @objc override dynamic public init()
  @objc deinit
}
extension Matcher {
  public struct IncludesLike {
    public enum IncludeCombine : Swift.String {
      case AND
      case OR
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public init(_ values: Swift.String..., combine: PactSwift.Matcher.IncludesLike.IncludeCombine = .AND, generate: Swift.String? = nil)
    public init(_ values: [Swift.String], combine: PactSwift.Matcher.IncludesLike.IncludeCombine = .AND, generate: Swift.String? = nil)
  }
}
@objc(PFMatcherIncludesLike) public class ObjcIncludesLike : ObjectiveC.NSObject {
  @objc(includesAll:generate:) public init(includesAll: [Swift.String], generate: Swift.String?)
  @objc(includesAny:generate:) public init(includesAny: [Swift.String], generate: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
extension ExampleGenerator {
  public struct RandomUUID {
    public init()
  }
}
@_inheritsConvenienceInitializers @objc(PFGeneratorRandomUUID) public class ObjcRandomUUID : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension ExampleGenerator {
  public struct RandomHexadecimal {
    public init(digits: Swift.UInt8 = 8)
  }
}
@objc(PFGeneratorRandomHexadecimal) public class ObjcRandomHexadecimal : ObjectiveC.NSObject {
  @objc(digits:) public init(digits: Swift.Int = 8)
  @objc override dynamic public init()
  @objc deinit
}
extension Matcher {
  public struct DecimalLike {
    public init(_ value: Foundation.Decimal)
  }
}
@objc(PFMatcherDecimalLike) public class ObjcDecimalLike : ObjectiveC.NSObject {
  @objc(value:) public init(value: Foundation.Decimal)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Interaction : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension Interaction : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension Interaction {
  @discardableResult
  @objc(givenProviderState:) dynamic public func given(_ providerState: Swift.String) -> PactSwift.Interaction
  @discardableResult
  public func given(_ providerStates: [PactSwift.ProviderState]) -> PactSwift.Interaction
  @discardableResult
  @objc(givenProviderStates:) dynamic public func objCGiven(_ providerStates: [PactSwift.ObjCProviderState]) -> PactSwift.Interaction
  public func given(_ providerStates: PactSwift.ProviderState...) -> PactSwift.Interaction
  @discardableResult
  public func withRequest(method: PactSwift.PactHTTPMethod, path: PactSwift.PactPathParameter, query: [Swift.String : [Any]]? = nil, headers: [Swift.String : Any]? = nil, body: Any? = nil) -> PactSwift.Interaction
  @discardableResult
  @objc(withRequestHTTPMethod:path:query:headers:body:) dynamic public func objCWithRequest(method: PactSwift.PactHTTPMethod, path: Swift.String, query: [Swift.String : [Any]]? = nil, headers: [Swift.String : Any]? = nil, body: Any? = nil) -> PactSwift.Interaction
  @discardableResult
  @objc dynamic public func willRespondWith(status: Swift.Int, headers: [Swift.String : Any]? = nil, body: Any? = nil) -> PactSwift.Interaction
}
extension Matcher {
  public struct MatchNull {
    public init()
  }
}
@_inheritsConvenienceInitializers @objc(PFMatcherNull) public class ObjcMatchNull : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class MockService : ObjectiveC.NSObject {
  @objc public enum TransferProtocol : Swift.Int {
    case standard
    case secure
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var baseUrl: Swift.String {
    @objc get
  }
  @objc(initWithConsumer:provider:transferProtocol:) convenience public init(consumer: Swift.String, provider: Swift.String, scheme: PactSwift.MockService.TransferProtocol = .standard)
  @objc(initWithConsumer:provider:transferProtocol:port:) convenience public init(consumer: Swift.String, provider: Swift.String, scheme: PactSwift.MockService.TransferProtocol = .standard, port: Swift.Int)
  @discardableResult
  @objc(uponReceiving:) public func uponReceiving(_ description: Swift.String) -> PactSwift.Interaction
  public func run(_ file: PactSwift.FileString? = #file, line: Swift.UInt? = #line, waitFor timeout: Foundation.TimeInterval? = nil, testFunction: @escaping (@escaping () -> Swift.Void) throws -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension MockService {
  @objc(run:) dynamic public func objcRun(_ testFunction: @escaping (@escaping () -> Swift.Void) -> Swift.Void)
  @objc(run:withTimeout:) dynamic public func objcRun(_ testFunction: @escaping (@escaping () -> Swift.Void) -> Swift.Void, timeout: Foundation.TimeInterval)
}
extension ExampleGenerator {
  public struct RandomDecimal {
    public init(digits: Swift.Int = 6)
  }
}
@objc(PFGeneratorRandomDecimal) public class ObjcRandomDecimal : ObjectiveC.NSObject {
  @objc(digits:) public init(digits: Swift.Int = 6)
  @objc override dynamic public init()
  @objc deinit
}
extension ExampleGenerator {
  public struct RandomBool {
    public init()
  }
}
@_inheritsConvenienceInitializers @objc(PFGeneratorRandomBool) public class ObjcRandomBool : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension ExampleGenerator {
  public struct RandomString {
    public init(size: Swift.Int = 20)
    public init(regex: Swift.String)
  }
}
@objc(PFGeneratorRandomString) public class ObjcRandomString : ObjectiveC.NSObject {
  @objc(size:) public init(size: Swift.Int = 20)
  @objc(regex:) public init(regex: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension Matcher {
  public struct SomethingLike {
    public init(_ value: Any)
  }
}
@objc(PFMatcherSomethingLike) public class ObjcSomethingLike : ObjectiveC.NSObject {
  @objc(value:) public init(value: Any)
  @objc override dynamic public init()
  @objc deinit
}
extension Matcher {
  public struct EqualTo {
    public init(_ value: Any)
  }
}
@objc(PFMatcherEqualTo) public class ObjcEqualTo : ObjectiveC.NSObject {
  @objc(value:) public init(value: Any)
  @objc override dynamic public init()
  @objc deinit
}
public typealias FileString = Swift.StaticString
public protocol ErrorReportable {
  func reportFailure(_ message: Swift.String)
  func reportFailure(_ message: Swift.String, file: PactSwift.FileString, line: Swift.UInt)
}
@objc public enum PactHTTPMethod : Swift.Int {
  case GET
  case HEAD
  case POST
  case PUT
  case PATCH
  case DELETE
  case TRACE
  case CONNECT
  case OPTIONS
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension PactHTTPMethod : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol PactPathParameter {
}
extension ExampleGenerator {
  public struct RandomDate {
    public init(format: Swift.String? = nil)
  }
}
@objc(PFGeneratorRandomDate) public class ObjcRandomDate : ObjectiveC.NSObject {
  @objc(format:) public init(format: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension ExampleGenerator {
  public struct RandomTime {
    public init(format: Swift.String? = nil)
  }
}
@objc(PFGeneratorRandomTime) public class ObjcRandomTime : ObjectiveC.NSObject {
  @objc(format:) public init(format: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension PactSwift.Matcher.IncludesLike.IncludeCombine : Swift.Equatable {}
extension PactSwift.Matcher.IncludesLike.IncludeCombine : Swift.Hashable {}
extension PactSwift.Matcher.IncludesLike.IncludeCombine : Swift.RawRepresentable {}
extension PactSwift.MockService.TransferProtocol : Swift.Equatable {}
extension PactSwift.MockService.TransferProtocol : Swift.Hashable {}
extension PactSwift.MockService.TransferProtocol : Swift.RawRepresentable {}
extension PactSwift.PactHTTPMethod : Swift.Equatable {}
extension PactSwift.PactHTTPMethod : Swift.Hashable {}
extension PactSwift.PactHTTPMethod : Swift.RawRepresentable {}
